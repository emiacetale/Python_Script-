#!/usr/bin/env python

import mdtraj as md
import argparse
import numpy as np
import subprocess as sp
#import matplotlib as mpl
#import matplotlib.pyplot as plt
#import matplotlib.cm as cm

def check_top(top_f):
    with open(top_f, 'r') as inp:
     with open ('top_new.top','w') as out:
      for line in inp:
          if not 'SOL' in line:
             if not '#' in line:
                print >>out, line[:-1]
    return 'top_new.top' 

def write_gro_frame(frame, outfile_name):
    with open(outfile_name,'w') as outfile:
       gfs = '{:5d}{:5s}{:5s}{:5d}{:8.3f}{:8.3f}{:8.3f}'          #Define Format 
       print >>outfile, 'Made trough a py script'
       print >>outfile, '{:d}'.format(frame.n_atoms)
       for xyz, atom in zip(frame.xyz[0,:], frame.topology.atoms):
           resnum=int(str(atom.residue)[-1])
           resnam=str(atom.residue)[0:-1]
           aname =atom.name
           aind  =atom.index+1
           x=xyz[0]
           y=xyz[1]
           z=xyz[2]
           line = gfs.format(resnum, resnam, aname, aind, x, y, z)
           print >>outfile, line
       print >>outfile, ' 10.000   10.000   10.000' #Fake box size

def write_pdb_frame(frame, outfile_name, values):
    with open(outfile_name,'w') as outfile:
            #ATOM  A#      Anam   Rnam A R#       X       Y       Z        occ     temp_f 
       pfs ='ATOM  {:>5d}  {:<4s}{:>3s}  {:>4d}    {:>8.3f}{:>8.3f}{:>8.3f}{:>6.2f}{:>6.2f}'
       print >>outfile, 'REMARK    GENERATED BY SCRIPT T factor=DG*'
       print >>outfile, 'TITLE     {:d} atoms'.format(frame.n_atoms)  
       print >>outfile, 'REMARK    THIS IS A SIMULATION BOX'
       x=frame.unitcell_lengths[0][0]*10
       y=frame.unitcell_lengths[0][1]*10
       z=frame.unitcell_lengths[0][2]*10
       print >>outfile, 'CRYST1   {:2.6f}   {:2.6f}   {:2.6f}  90.00  90.00  90.00 P 1           1'.format(x,y,z)
       print >>outfile, 'MODEL        1'
       for xyz, atom, dg in zip(frame.xyz[0,:], frame.topology.atoms, values):
           resnum=int(str(atom.residue)[-1])
           resnam=str(atom.residue)[0:-1]
           aname =atom.name
           aind  =atom.index+1
           x=xyz[0]*10
           y=xyz[1]*10
           z=xyz[2]*10
           line=pfs.format(aind, aname, resnam, resnum, x, y, z, 1.0, dg)
           print >>outfile,line
       print >>outfile,'TER'
       print >>outfile,'ENDMDL'

def frame_energy(frame, top_file):
    write_gro_frame(frame, 'gromacs.gro')
    sp.call(["cp",top_file,"gromacs.top"])                                       #2>/dev/null
    p=sp.Popen("/home/ebrini/software/SEA/bin/solvate -s gromacs -d 12 -i 500 -pa 2>/dev/null", shell=True, stdout=sp.PIPE)
    (output, err) =  p.communicate()
    output=output.split('\n')
    for line in output:
        if 'Non-Polar' in line:
            line=line.split()
            Enp=float(line[1])
        if 'Total' in line:
            line=line.split()
            Et=float(line[1])
    E=np.loadtxt('gromacs.solv', skiprows=1, usecols=[1,3])
    return E, np.array([Enp,Et-Enp,Et])

def PADG( trj, top_file):
    padg=np.zeros((trj.topology.n_atoms,2), dtype='int32') #matrix to store the per atom DG* (np, p)
    Emol=np.array([0.0, 0.0, 0.0])                         #to store the average solvation gree energyes of the mol
    i=0
    top_file=check_top(top_file)
    for frame in trj:
        #print 'frame: ',i
        padgf, Ef=frame_energy(frame, top_file)
        padg=padg+padgf/len(trj)
        Emol=Emol+Ef/len(trj)
        i=i+1
    return padg, Emol

def write_res(frame, paDG):
    write_pdb_frame(frame, 'res_p.pdb', paDG[:,0])           #We wite a pdb for polar, ...
    write_pdb_frame(frame, 'res_np.pdb' , paDG[:,1])         #              ... non-polar, ...
    write_pdb_frame(frame, 'res_tot.pdb', paDG[:,0]+paDG[:,1])  #              ... and total per atom contribution to DG*
    
def parse_args():                              #in line argument parser with help 
    parser = argparse.ArgumentParser()
    parser.add_argument('top', help='topology file')
    parser.add_argument('trj', help='xtc trajectory file')
    parser.add_argument('pdb', help='pdb topolgy file' )
    return parser.parse_args()

def main():
    args = parse_args()                     #We read some input 
    trj=md.load_xtc(args.trj, top=args.pdb) #We load the trj 
    #Here we can split the trajectory according to some analysis 
    paDG, Emol=PADG(trj, args.top)          #We calc the avere contribution of every atom to the DG* and the molecular DG*
    write_res(trj[0], paDG)                 #We write the res files in pdb 
    print 'DG*_np = ',Emol[0]               #and we print the molecular DG* components
    print 'DG*_p  = ',Emol[1]
    print 'DG*_tot= ',Emol[2]


if __name__ == '__main__': #Weird Python way to execute main()
    main()

